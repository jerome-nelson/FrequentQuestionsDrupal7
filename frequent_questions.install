<?php
function frequent_questions_enable(){}
function frequent_questions_disable(){}

function frequent_questions_install() {

  $type_name = 'frequent_questions';

  if(!in_array($type_name, node_type_get_names())) {

    node_types_rebuild();

    // Creating Content-Type
    $types = array(
        array(
            'type' => $type_name,
            'name' => st('Frequent Question'),
            'base' => 'node_content',
            'description' => st('Use these to create frequent questions'),
            'custom' => 1,
            'modified' => 1,
            'locked' => 0,
        ),
    );

    foreach ($types as $type) {
      $type = node_type_set_defaults($type);
      node_type_save($type);
      node_add_body_field($type);
    }
  }
  else {
    drupal_set_message(st('The content-type for the module is already set.'),'error');
  }

  // Create Category Tag Field (The machine name of the field can contain only lowercase alphanumeric characters and underscores.)
  $field_name = 'frequent_category';
  $entity_type = 'node';

  if (!field_info_instance($entity_type, $field_name, $type_name)) {
  //Create the field definition array.
    $field = array(
        'field_name'  => $field_name,
        'label'       => t('Test Label'),
        'description' => t('Used to select a taxonomy term type'),
        'type'        => 'taxonomy_term_reference',
        'entity_type' => 'frequent_questions',
        'locked'      => 1,
        'module'      => 'frequent_questions',
        'settings' => array(
            'allowed_values' => array(
                array(
                    'vocabulary' => 'frequent_questions_categories',
                    'parent' => 0,
                ),
            ),
        ),
    );
    field_create_field($field);

//  Create the field instance definition array.
    // TODO: create autocomplete widget list
    // TODO: Allow more then one category
    $instance = array(
        'label'       => t('Select Categories'),
        'field_name'  => 'frequent_category',
        'entity_type' => 'node',
        'bundle'      => 'frequent_questions',
        'description' => st('This field contain the parent category for an individual Freqent Question'),
        'required'    => TRUE,
        'widget' => array(
            'type'      => 'taxonomy_autocomplete'
        ),
        'weight' => -1,
    );
    // Create an instance of the field and bind it to the bundle.
    field_create_instance($instance);
  }
  else {
    drupal_set_message(st('The fields and instance for the module is already set.'),'error');
  }

  // Setup Vocabulary
  if(taxonomy_vocabulary_machine_name_load('frequent_questions_categories') === FALSE) {

    $category_vocab  = (object) array(
        'name'          => t('Frequent Question: Categories'),
        'description'   => t('This contains all categories for Frequent Questions Module.'),
        'machine_name'  => 'frequent_questions_categories',
        'hierarchy'     => 0 // Default hierarchy
    );

    // Create taxonomy & then get information of it
    taxonomy_vocabulary_save($category_vocab);
    $vocab = taxonomy_vocabulary_machine_name_load('frequent_questions_categories');

    // Add in default term to assign questions
    $category_term = (object) array(
        'name'          => t('Default Category'),
        'description'   => t('All un-assigned questions will set to this by default.'),
        'vid'           => $vocab->vid
    );

    taxonomy_term_save($category_term);

  }
  else {
    drupal_set_message('Vocabulary already exists.');
  }
}

// Use hook_enable/disable when module is switched on/off
function frequent_questions_uninstall() {

  // Uninstall Content Type
  node_type_delete('frequent_questions');

  // Will delete fields and instance
  // TODO: Confirm instance (bundles) are removed
  if($instance = field_info_instance('node','frequent_category','frequent_questions')) {
    field_delete_instance($instance);
  }

  //Vocab Uninstall
  $vocab = taxonomy_vocabulary_machine_name_load('frequent_questions_categories');
  taxonomy_vocabulary_delete($vocab->vid);

  // Rebuild Node Types
  node_types_rebuild();
}
